#!/usr/bin/env jip
# This is a simple wrapper to count lines in a given input
# file or in a given input stream.
#
# Usage:
#   line_count.jip [-a] [-i <input>...] [-o <output>]
#   line_count.jip [--help]
#
# Options:
#   -a            Count everything, not just line
#   --help        Show this help message
#
# Inputs:
#   -i, --input <input>...    The input file to read
#                             [default: stdin]
# Outputs:
#   -o, --output <output>     The output file to write
#                             [default: stdout]


#%begin pipeline
#run("line_count", input=args.input, output="test_run.out") | run("line_count") 
#run("line_count", input=args.input, output="test_run.out") | (run("line_count") | run("line_count"))

#run("bash_runner", cmd="echo 'Sleep for a while'; sleep 5; echo 'Done'") | (run("bash_runner", cmd="echo 'I am one'") + run("bash_runner", cmd="echo 'I am the other one'"))

#a = run("bash_runner", cmd='echo "FIRST JOB ${JIP_ID}"', output="a.out")


a = run("bash", cmd='echo "1 JOB-${JIP_ID}"', output=args['output'])
#b = run("bash", cmd='echo "2 JOB-$JIP_ID. INPUT:"; cat ${input}; echo "2 DONE"', output="b.out")
b = run("""bash -c 'echo "2 JOB-$JIP_ID. INPUT:"; cat ${input}; echo "2 DONE"' --output=b.out""")

a | b
#a = run("bash_runner", cmd='echo "1 JOB-${JIP_ID}"', output="a.out")
#b = run("bash_runner", cmd='echo "2 JOB-$JIP_ID. INPUT:"; cat -; echo "2 DONE"', output="b.out")
#c = run("bash_runner", cmd='echo "3 JOB-$JIP_ID. INPUT:"; cat -; echo "3 DONE"', output="c.out")
#a | b | c


#a = run("bash_runner", cmd='echo "1 JOB-${JIP_ID}"', output="a.out")
#b = run("bash_runner", cmd='echo "2 JOB-$JIP_ID. INPUT:"; cat -; echo "2 DONE"', output="b.out")
#c = run("bash_runner", cmd='echo "3 JOB-$JIP_ID. INPUT:"; cat -; echo "3 DONE"', output="c.out")
#a | (b + c)


#a = run("bash_runner", cmd='echo "1 JOB-${JIP_ID}"', output="a.out")
#b = run("bash_runner", cmd='echo "2 JOB-$JIP_ID. INPUT:"; cat -; echo "2 DONE"', output="b.out")
#c = run("bash_runner", cmd='echo "3 JOB-$JIP_ID. INPUT:"; cat -; echo "3 DONE"', output="c.out")
#d = run("bash_runner", cmd='echo "4 JOB-$JIP_ID. INPUT:"; cat -; echo "4 DONE"', output="d.out")
#a | (b + c) | d  ## merge with cat

#c = run("bash_runner", cmd='echo "THIRD JOB $JIP_ID. INPUT:"; cat -; echo "THIRD DONE"', output="c.out")
#d = run("bash_runner", cmd='echo "FOURTH JOB $JIP_ID. INPUT:"; cat -; echo "FOURTH DONE"', output="d.out")
#e = run("bash_runner", cmd="echo "INDEPENDANT FIRST JOB"')

#a | ( b + c) | d
#
#


#a = run("bash_runner", cmd='echo "1 JOB-${JIP_ID}"', output="a.out")
#b = run("bash_runner", cmd='echo "2 JOB-$JIP_ID. INPUT:"; cat -; echo "2 DONE"', output="b.out")
#c = run("bash_runner", cmd='echo "3 JOB-$JIP_ID. INPUT:"; cat -; echo "3 DONE"', output="c.out")
#d = run("bash_runner", cmd='echo "4 JOB-$JIP_ID. INPUT:"; cat -; echo "4 DONE"', output="d.out")
#a | (b + c) | d  ## merge with cat


#%end pipeline

